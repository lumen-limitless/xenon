// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Int
  image       String
  categories  Category[]  @relation("ProductCategory")
  items       CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItem   OrderItem[]
}

model Category {
  id          String    @id @default(cuid())
  title       String    @unique
  description String
  image       String
  products    Product[] @relation("ProductCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  items     CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, cartId])
}

enum OrderStatus {
  PENDING
  ACCEPTED
  SHIPPED
  COMPLETED
  CANCELLED
}

model Order {
  id        String      @id @default(cuid())
  status    OrderStatus @default(PENDING)
  total     Int
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, orderId])
}
